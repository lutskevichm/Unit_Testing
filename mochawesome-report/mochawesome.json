{
  "stats": {
    "suites": 2,
    "tests": 23,
    "passes": 23,
    "pending": 0,
    "failures": 0,
    "start": "2021-11-15T16:52:05.629Z",
    "end": "2021-11-15T16:52:05.679Z",
    "duration": 50,
    "testsRegistered": 23,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8a7f7d7a-bd98-4d54-b51c-1a9558a6294a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6c68a6bf-3347-4d05-ad01-521d94c80d33",
          "title": "scenarios for add method",
          "fullFile": "C:\\ATM_JS\\Unit_Testing\\test\\specs\\calculator.spec.js",
          "file": "\\test\\specs\\calculator.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"scenarios for add method\"",
              "fullTitle": "scenarios for add method \"before each\" hook in \"scenarios for add method\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new Calculator();",
              "err": {},
              "uuid": "02be4246-0110-42d8-a3f6-e12c092aaeae",
              "parentUUID": "6c68a6bf-3347-4d05-ad01-521d94c80d33",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"scenarios for add method\"",
              "fullTitle": "scenarios for add method \"after each\" hook in \"scenarios for add method\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "22c64dfe-0701-4ff8-9222-deb4ebfc3eab",
              "parentUUID": "6c68a6bf-3347-4d05-ad01-521d94c80d33",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "[positive] should return sum for positive numbers",
              "fullTitle": "scenarios for add method [positive] should return sum for positive numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.add(1, 2, 7)).to.be.equal(10);",
              "err": {},
              "uuid": "0a7b0cf4-6ec6-4840-ad05-86c3e577e62f",
              "parentUUID": "6c68a6bf-3347-4d05-ad01-521d94c80d33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[positive] should return sum for negative numbers",
              "fullTitle": "scenarios for add method [positive] should return sum for negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.add(-1, -2, -3)).to.be.equal(-6);",
              "err": {},
              "uuid": "31d59728-947b-4e31-8dab-8387bfa90aa6",
              "parentUUID": "6c68a6bf-3347-4d05-ad01-521d94c80d33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[positive] should return sum for positive & negative numbers",
              "fullTitle": "scenarios for add method [positive] should return sum for positive & negative numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.add(-1, 100)).to.be.equal(99);",
              "err": {},
              "uuid": "07d88758-2bf2-4557-9d36-4ca5cc0f2039",
              "parentUUID": "6c68a6bf-3347-4d05-ad01-521d94c80d33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[positive] should return sum for nulls",
              "fullTitle": "scenarios for add method [positive] should return sum for nulls",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.add(0, 0, 0)).to.be.equal(0);",
              "err": {},
              "uuid": "28bca5d3-3de6-416c-ae0f-d59281a3da82",
              "parentUUID": "6c68a6bf-3347-4d05-ad01-521d94c80d33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[positive] should return sum for floats",
              "fullTitle": "scenarios for add method [positive] should return sum for floats",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.add(10, 28.69)).to.be.equal(38.69);",
              "err": {},
              "uuid": "9d49028b-4233-4b21-945a-d23dfd26fea3",
              "parentUUID": "6c68a6bf-3347-4d05-ad01-521d94c80d33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[positive] should return sum for max safe integer",
              "fullTitle": "scenarios for add method [positive] should return sum for max safe integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.add(1, 9007199254740990)).to.be.equal(9007199254740991);",
              "err": {},
              "uuid": "7309afab-67e4-4975-a1c8-7c03f438ec8e",
              "parentUUID": "6c68a6bf-3347-4d05-ad01-521d94c80d33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[positive] should return sum for min safe integer",
              "fullTitle": "scenarios for add method [positive] should return sum for min safe integer",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.add(-40000, -9007199254700991)).to.be.equal(-9007199254740991);",
              "err": {},
              "uuid": "3d914290-17b8-4a93-9d83-3cfcc453c60c",
              "parentUUID": "6c68a6bf-3347-4d05-ad01-521d94c80d33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[positive] should return null sum for empty array",
              "fullTitle": "scenarios for add method [positive] should return null sum for empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.add()).to.be.equal(0);",
              "err": {},
              "uuid": "0ada370b-5a32-4e3d-840c-0a4f37bb1ba3",
              "parentUUID": "6c68a6bf-3347-4d05-ad01-521d94c80d33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[positive] should return sum array of 20 numbers",
              "fullTitle": "scenarios for add method [positive] should return sum array of 20 numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.add(1, 2, 3, 100, 1000, 852, -9000, 89, 84, -9007199254740991, 852, 1000, -6, 14, 15, -5000, 1700, 20, 9000, 100000000000)).to.be.equal(-9007099254740264);",
              "err": {},
              "uuid": "9dad8828-deb7-4b2a-b8a1-43b5abe6585c",
              "parentUUID": "6c68a6bf-3347-4d05-ad01-521d94c80d33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[negative] should return error for chars",
              "fullTitle": "scenarios for add method [negative] should return error for chars",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => validator.add(1, 'a')).to.throw(`[1,a] is not an array of \"Numbers\"`);",
              "err": {},
              "uuid": "7a1c352b-81f7-47d1-876d-1ef4e5e752f7",
              "parentUUID": "6c68a6bf-3347-4d05-ad01-521d94c80d33",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[negative] should return error for string",
              "fullTitle": "scenarios for add method [negative] should return error for string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => validator.add(2, 'string')).to.throw(`[2,string] is not an array of \"Numbers\"`);",
              "err": {},
              "uuid": "c26e0583-8356-4497-87f7-6fcd1b1b3c7d",
              "parentUUID": "6c68a6bf-3347-4d05-ad01-521d94c80d33",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0a7b0cf4-6ec6-4840-ad05-86c3e577e62f",
            "31d59728-947b-4e31-8dab-8387bfa90aa6",
            "07d88758-2bf2-4557-9d36-4ca5cc0f2039",
            "28bca5d3-3de6-416c-ae0f-d59281a3da82",
            "9d49028b-4233-4b21-945a-d23dfd26fea3",
            "7309afab-67e4-4975-a1c8-7c03f438ec8e",
            "3d914290-17b8-4a93-9d83-3cfcc453c60c",
            "0ada370b-5a32-4e3d-840c-0a4f37bb1ba3",
            "9dad8828-deb7-4b2a-b8a1-43b5abe6585c",
            "7a1c352b-81f7-47d1-876d-1ef4e5e752f7",
            "c26e0583-8356-4497-87f7-6fcd1b1b3c7d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "efb2a97a-9622-47b6-b66b-e95aeb83297e",
          "title": "scenarios for multiply method",
          "fullFile": "C:\\ATM_JS\\Unit_Testing\\test\\specs\\calculator.spec.js",
          "file": "\\test\\specs\\calculator.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"scenarios for multiply method\"",
              "fullTitle": "scenarios for multiply method \"before each\" hook in \"scenarios for multiply method\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new Calculator();",
              "err": {},
              "uuid": "f80c39fa-98ca-43e6-ac2f-cfe196085d18",
              "parentUUID": "efb2a97a-9622-47b6-b66b-e95aeb83297e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"scenarios for multiply method\"",
              "fullTitle": "scenarios for multiply method \"after each\" hook in \"scenarios for multiply method\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "954f4182-45c7-4f05-92ba-cee1d2088a96",
              "parentUUID": "efb2a97a-9622-47b6-b66b-e95aeb83297e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "[positive] should return product of positive numbers",
              "fullTitle": "scenarios for multiply method [positive] should return product of positive numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.multiply(1, 2, 7)).to.be.equal(14);",
              "err": {},
              "uuid": "94127d1b-8563-459c-8aea-dead07beaadd",
              "parentUUID": "efb2a97a-9622-47b6-b66b-e95aeb83297e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[positive] should return product of negative numbers",
              "fullTitle": "scenarios for multiply method [positive] should return product of negative numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.multiply(-1, -2, -3)).to.be.equal(-6);",
              "err": {},
              "uuid": "8828f34e-f9fc-4501-87fa-6deea54cdc57",
              "parentUUID": "efb2a97a-9622-47b6-b66b-e95aeb83297e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[positive] should return product of positive & negative numbers",
              "fullTitle": "scenarios for multiply method [positive] should return product of positive & negative numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.multiply(-1, 100)).to.be.equal(-100);",
              "err": {},
              "uuid": "d46d1938-ddb5-4970-bf95-4dc0fec53fec",
              "parentUUID": "efb2a97a-9622-47b6-b66b-e95aeb83297e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[positive] should return product of nulls",
              "fullTitle": "scenarios for multiply method [positive] should return product of nulls",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.multiply(0, 0, 0)).to.be.equal(0);",
              "err": {},
              "uuid": "5e87c433-c0c2-46e0-b6be-d0f7eb5d687d",
              "parentUUID": "efb2a97a-9622-47b6-b66b-e95aeb83297e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[positive] should return product of floats",
              "fullTitle": "scenarios for multiply method [positive] should return product of floats",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.multiply(2, 28.6)).to.be.equal(57.2);",
              "err": {},
              "uuid": "52a0ebd7-d00b-430d-8aba-f88b748e0d7b",
              "parentUUID": "efb2a97a-9622-47b6-b66b-e95aeb83297e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[positive] should return product of floats",
              "fullTitle": "scenarios for multiply method [positive] should return product of floats",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.multiply(10, 28.69)) - 286.9 < 0.000001;",
              "err": {},
              "uuid": "b5ece015-6bd2-404a-b051-2427bdd7564d",
              "parentUUID": "efb2a97a-9622-47b6-b66b-e95aeb83297e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[positive] should return product of max safe integer",
              "fullTitle": "scenarios for multiply method [positive] should return product of max safe integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.multiply(1, 9007199254740991)).to.be.equal(9007199254740991);",
              "err": {},
              "uuid": "c5f45f6d-43f7-4713-9f31-5e4c7bc269af",
              "parentUUID": "efb2a97a-9622-47b6-b66b-e95aeb83297e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[positive] should return product of min safe integer",
              "fullTitle": "scenarios for multiply method [positive] should return product of min safe integer",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.multiply(1, -9007199254740991)).to.be.equal(-9007199254740991);",
              "err": {},
              "uuid": "57a2e24c-fb60-435c-94e5-7862a9975ff4",
              "parentUUID": "efb2a97a-9622-47b6-b66b-e95aeb83297e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[positive] should return null product for empty array",
              "fullTitle": "scenarios for multiply method [positive] should return null product for empty array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.multiply()).to.be.equal(0);",
              "err": {},
              "uuid": "ddeb6b44-2b1f-49aa-a815-2a964df02b1f",
              "parentUUID": "efb2a97a-9622-47b6-b66b-e95aeb83297e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[positive] should return product of array of 20 numbers",
              "fullTitle": "scenarios for multiply method [positive] should return product of array of 20 numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(validator.multiply(1, 2, 3, 10, 1, 5, 2, 5, 2, 10)).to.be.equal(60000);",
              "err": {},
              "uuid": "ea4c00bd-5f73-4716-b36b-38c883e8f31a",
              "parentUUID": "efb2a97a-9622-47b6-b66b-e95aeb83297e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[negative] should return error for chars",
              "fullTitle": "scenarios for multiply method [negative] should return error for chars",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => validator.multiply(1, 'a')).to.throw(`[1,a] is not an array of \"Numbers\"`);",
              "err": {},
              "uuid": "fb2aa6f7-8113-4272-bdd9-19324a659feb",
              "parentUUID": "efb2a97a-9622-47b6-b66b-e95aeb83297e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "[negative] should return error for string",
              "fullTitle": "scenarios for multiply method [negative] should return error for string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => validator.multiply(2, 'string')).to.throw(`[2,string] is not an array of \"Numbers\"`);",
              "err": {},
              "uuid": "90ccc778-7f48-44ea-b5a9-122299181872",
              "parentUUID": "efb2a97a-9622-47b6-b66b-e95aeb83297e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "94127d1b-8563-459c-8aea-dead07beaadd",
            "8828f34e-f9fc-4501-87fa-6deea54cdc57",
            "d46d1938-ddb5-4970-bf95-4dc0fec53fec",
            "5e87c433-c0c2-46e0-b6be-d0f7eb5d687d",
            "52a0ebd7-d00b-430d-8aba-f88b748e0d7b",
            "b5ece015-6bd2-404a-b051-2427bdd7564d",
            "c5f45f6d-43f7-4713-9f31-5e4c7bc269af",
            "57a2e24c-fb60-435c-94e5-7862a9975ff4",
            "ddeb6b44-2b1f-49aa-a815-2a964df02b1f",
            "ea4c00bd-5f73-4716-b36b-38c883e8f31a",
            "fb2aa6f7-8113-4272-bdd9-19324a659feb",
            "90ccc778-7f48-44ea-b5a9-122299181872"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": null,
      "version": "6.0.1"
    }
  }
}